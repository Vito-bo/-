class Solution {
public:
    int Fibonacci(int n) {
        //斐波那契数列定义：F(n)=F(n-1)+F(n-2)(n>=2)其中F(1)=F(2)=1
        //方法1：递归  时间复杂度：O(2^n)
        /*
        if(n<=0)
            return 0;
        if(n==1 || n==2)
            return 1;
        return Fibonacci(n-1) + Fibonacci(n-2);
        */
        //方法2：迭代  时间复杂度：O(1)
        /*if(n<=0)
            return 0;
        if(n==1 || n==2)
            return 1;
        int f1=1;
        int f2=1;
        int ret=0;
        for(int i=3;i<=n;i++)
        {
            ret=f1+f2;
            f1=f2;
            f2=ret;
        }
        return ret;
        */
        //方法3：动态规划，时间复杂度：O(n)
        //状态：F(n)
        //状态转移方程：F(n)=F(n-1)+F(n-2)
        //初始值：F(0)=0,F(1)=1,F(2)=1
        //返回结果：F(n)
        
        //初始值：F(0)=0,F(1)=1,F(2)=1
        if(n<=0)
            return 0;
        if(n==1 || n==2)
            return 1;
        //申请一个数组保存子问题的解，从第0项开始
        int *arr= new int[n+1];
        arr[0]=0;
        arr[1]=1;
        for(int i=2;i<=n;i++)
        {
            arr[i]=arr[i-1]+arr[i-2];
        }
        return arr[n];
        delete[] arr;
    }
};